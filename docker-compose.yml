# docker-compose build
# COMPOSE_PROFILES=database KONG_DATABASE=postgres docker-compose up -d

version: '3.9'

x-kong-config:
  &kong-env
  KONG_DATABASE: ${KONG_DATABASE:-off}
  KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
  KONG_PG_HOST: db
  KONG_PG_USER: ${KONG_PG_USER:-kong}
  KONG_PG_PASSWORD_FILE: /run/secrets/kong_postgres_password

x-environment:
  &default-environment
  DATABASE_URL: postgres://postgres:postgres@postgres:5432/postgres
  SECRET_KEY: 3jvP3KqvrkYy02Swfj02ibmg7ua2jQP4CwujDUa2x
  PORT: 8000
  EMAIL_URL: consolemail://
  GLITCHTIP_DOMAIN: https://glitchtip.exercise.dev
  DEFAULT_FROM_EMAIL: email@glitchtip.com
  CELERY_WORKER_AUTOSCALE: "1,3"
  CELERY_WORKER_MAX_TASKS_PER_CHILD: "10000"

x-depends_on:
  &default-depends_on
  - postgres
  - redis

networks:
  exercise_network:
    driver: bridge

services:
  nginx:
    build: ./nginx
    ports: 
      - 80:80
    networks: 
      - exercise_network
    volumes:
      - ./nginx/html:/usr/share/nginx/html
    depends_on: 
      - exercise-app-1
      - exercise-app-2
      - exercise-app-3
      - simple-app
      - micro-app
    extra_hosts:
      - "rp.exercise.dev:127.0.0.1"
      - "lb.exercise.dev:127.0.0.1"
      - "ws.exercise.dev:127.0.0.1"
      - "simple.exercise.dev:127.0.0.1"
      - "micro.exercise.dev:127.0.0.1"
      - "jaeger.exercise.dev:127.0.0.1"
      - "prometheus.exercise.dev:127.0.0.1"
      - "grafana.exercise.dev:127.0.0.1"
      
  # via Kong: http://localhost:8000/exercise-app-1
  exercise-app-1:
    image: glendmaatita/exercise-app:v1.0.1
    container_name: "exercise-app-1"
    depends_on:
      - jaeger
    ports:
      - "81:3000"
    networks:
      - exercise_network
    environment:
      - APP_PORT=3000
      - SENTRY_DSN=http://glitchtip:8900
      - NODE_ENV=production
      - OTEL_URL=http://jaeger:4318/api/traces
      - LOKI_HOST=http://loki:3100

  # via Kong: http://localhost:8000/exercise-app-2
  exercise-app-2:
    image: glendmaatita/exercise-app:v1.0.2
    container_name: "exercise-app-2"
    ports:
      - "82:3000"
    networks:
      - exercise_network

  # via Kong: http://localhost:8000/exercise-app-3
  exercise-app-3:
    image: glendmaatita/exercise-app:v1.0.3
    container_name: "exercise-app-3"
    ports:
      - "83:3000"
    networks:
      - exercise_network

  # Kong API Gateway
  kong-migrations:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    command: kong migrations bootstrap
    profiles: [ "database" ]
    depends_on:
      - db
    environment:
      <<: *kong-env
    secrets:
      - kong_postgres_password
    networks:
      - exercise_network
    restart: on-failure

  kong-migrations-up:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    command: kong migrations up && kong migrations finish
    profiles: [ "database" ]
    depends_on:
      - db
    environment:
      <<: *kong-env
    secrets:
      - kong_postgres_password
    networks:
      - exercise_network
    restart: on-failure

  # access Dashboard: http://localhost:8002/
  # Create Gateway services and then create routes
  kong:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    user: "${KONG_USER:-kong}"
    environment:
      <<: *kong-env
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_PROXY_LISTEN: "${KONG_PROXY_LISTEN:-0.0.0.0:8000}"
      KONG_ADMIN_LISTEN: "${KONG_ADMIN_LISTEN:-0.0.0.0:8001}"
      KONG_ADMIN_GUI_LISTEN: "${KONG_ADMIN_GUI_LISTEN:-0.0.0.0:8002}"
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_PREFIX: ${KONG_PREFIX:-/var/run/kong}
      KONG_DECLARATIVE_CONFIG: "/opt/kong/kong.yaml"
    secrets:
      - kong_postgres_password
    networks:
      - exercise_network
    ports:
      # The following two environment variables default to an insecure value (0.0.0.0)
      # according to the CIS Security test.
      - "${KONG_INBOUND_PROXY_LISTEN:-0.0.0.0}:8000:8000/tcp"
      - "${KONG_INBOUND_SSL_PROXY_LISTEN:-0.0.0.0}:8443:8443/tcp"
      # Making them mandatory but undefined, like so would be backwards-breaking:
      # - "${KONG_INBOUND_PROXY_LISTEN?Missing inbound proxy host}:8000:8000/tcp"
      # - "${KONG_INBOUND_SSL_PROXY_LISTEN?Missing inbound proxy ssl host}:8443:8443/tcp"
      # Alternative is deactivating check 5.13 in the security bench, if we consider Kong's own config to be enough security here

      - "127.0.0.1:8001:8001/tcp"
      - "127.0.0.1:8444:8444/tcp"
      - "127.0.0.1:8002:8002/tcp"
    healthcheck:
      test: [ "CMD", "kong", "health" ]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure:5
    read_only: true
    volumes:
      - kong_prefix_vol:${KONG_PREFIX:-/var/run/kong}
      - kong_tmp_vol:/tmp
      - ./kong/config:/opt/kong
    security_opt:
      - no-new-privileges

  # simple app
  simple-app:
    image: glendmaatita/simple-app:latest
    container_name: "simple-app"
    depends_on:
      - redis
      - kafka
      - jaeger
    ports:
      - "91:3000"
    networks:
      - exercise_network
    environment:
      - TARGET_URL=http://micro-app:3000
      - APP_PORT=3000
      - REDIS_URL=redis://redis:6379
      - KAFKA_HOST=kafka:9092
      - OTEL_URL=http://jaeger:4318/api/traces

  # micro app
  micro-app:
    image: glendmaatita/micro-app:latest
    container_name: "micro-app"
    depends_on:
      - redis
      - kafka
      - jaeger
    ports:
      - "92:3000"
    networks:
      - exercise_network
    environment:
      - APP_PORT=3000
      - REDIS_URL=redis://redis:6379
      - KAFKA_HOST=kafka:9092
      - OTEL_URL=http://jaeger:4318/api/traces

  redis:
    image: redis:latest
    restart: 'always'
    networks:
      - exercise_network
    ports:
      - "6379:6379"

  kafka:
    image: 'bitnami/kafka:latest'
    ports:
      - "9092:9092"
    networks:
      - exercise_network
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER

  jaeger:
    image: jaegertracing/all-in-one:1.42
    container_name: "jaeger"
    networks:
      - exercise_network
    ports:
    - "16686:16686"
    - "4318:4318"
    environment:
    - COLLECTOR_OTLP_ENABLED=true
    - OTEL_TRACES_EXPORTER=otlp

  prometheus:
    image: prom/prometheus:latest
    container_name: "prometheus"
    networks:
      - exercise_network
    ports:
      - "9090:9090"
    volumes:
      - $(pwd)/prometheus":/prometheus-data
    command:
      - '-config.file=/prometheus-data/prometheus.yml'
  
  loki:
    image: grafana/loki:latest
    container_name: "loki"
    networks:
      - exercise_network
    ports:
      - '3100:3100'
    volumes:
      - loki-storage:/usr/local/bin/loki/data

  grafana:
    image: grafana/grafana:latest
    container_name: "grafana"
    networks:
      - exercise_network
    ports:
      - "9091:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./grafana:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
      - loki
      
  db:
    image: postgres:9.5
    profiles: [ "database" ]
    networks:
      - exercise_network
    environment:
      POSTGRES_DB: ${KONG_PG_DATABASE:-kong}
      POSTGRES_USER: ${KONG_PG_USER:-kong}
      POSTGRES_PASSWORD_FILE: /run/secrets/kong_postgres_password
    secrets:
      - kong_postgres_password
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "-d",
          "${KONG_PG_DATABASE:-kong}",
          "-U",
          "${KONG_PG_USER:-kong}"
        ]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: on-failure
    stdin_open: true
    tty: true
    volumes:
      - kong_data:/var/lib/postgresql/data

  # glitchtip
  postgres:
    image: postgres:16
    networks:
      - exercise_network
    environment:
      POSTGRES_HOST_AUTH_METHOD: "trust"
    restart: unless-stopped
    volumes:
      - glitchtip_pgdata:/var/lib/postgresql/data
  web:
    image: glitchtip/glitchtip
    networks:
      - exercise_network
    depends_on: *default-depends_on
    ports:
      - "8900:8000"
    environment: *default-environment
    restart: unless-stopped
    container_name: "glitchtip-web"
    volumes: 
      - glitchtip_uploads:/code/uploads
  worker:
    image: glitchtip/glitchtip
    networks:
      - exercise_network
    command: ./bin/run-celery-with-beat.sh
    depends_on: *default-depends_on
    environment: *default-environment
    restart: unless-stopped
    container_name: "glitchtip-worker"
    volumes: 
      - glitchtip_uploads:/code/uploads
  migrate:
    image: glitchtip/glitchtip
    depends_on: *default-depends_on
    command: "./manage.py migrate"
    environment: *default-environment
    
volumes:
  kong_data: {}
  kong_prefix_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs
  kong_tmp_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs
  glitchtip_pgdata:
  glitchtip_uploads:  
  grafana-storage:
  loki-storage:

secrets:
  kong_postgres_password:
    file: ./kong/POSTGRES_PASSWORD